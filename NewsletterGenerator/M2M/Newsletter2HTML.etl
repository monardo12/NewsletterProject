rule Newsletter2HTML
	transform
		s:newsletter!Newsletter
	to
		t:html!HTML{
			if(s.table <> null){
				var table = s.table.equivalent();
				t.htmlElements.add(table);
			}
		}

@lazy
rule Table2TABLE
	transform
		s:newsletter!Table
	to
		t:html!TABLE{
			t.width = s.width.toString();
			if(s.backgroundColor <> null){
				t.bgcolor = s.backgroundColor.literal;
			}
			t.align = "center";
			t.border = 0;
			t.cellpadding = "0";
			t.cellspacing = "0";
			for(row in s.rows){
				t.addElement(row.equivalent());
			}
		}

@lazy
rule Row2TR
	transform
		s:newsletter!Row
	to
		t:html!TR{
			t.height = s.height.asString();
			if(s.backgroundColor <> null){
				t.bgcolor = s.backgroundColor.literal;
			}
			if(s.cells.size() > 1){
				var newTR = new html!TR;
				for(cell in s.cells){
					newTR.addElement(cell.equivalent());
				}
				var newTABLE = new html!TABLE;
				newTABLE.addElement(newTR);
				var newTD = new html!TD;
				newTD.addElement(newTABLE);
				t.addElement(newTD);
			} else if(s.cells.size() == 1){
				t.addElement(s.cells.get(0).equivalent());			
			}
		}

@lazy		
rule Cell2TD
	transform
		s:newsletter!Cell
	to
		t:html!TD{
			t.width = s.width.asString();
			if(s.backgroundColor <> null){
				t.bgcolor = s.backgroundColor.literal;
			}
			for(element in s.elements){
				var htmlElement : html!HTMLElement;
				if(element.isTypeOf(newsletter!Text)){
					htmlElement = element.getHtmlTextElement();
				} else if(element.isTypeOf(newsletter!Button)){
					htmlElement = element.getHtmlButtonElement();
				} else if(element.isTypeOf(newsletter!Image)){
					htmlElement = element.getHtmlImageElement();
				} else if(element.isTypeOf(newsletter!Video)){
					htmlElement = element.getHtmlVideoElement();
				} else if(element.isTypeOf(newsletter!Divider)){
					htmlElement = element.getHtmlDividerElement();
				} 
				t.addElement(htmlElement);
			}
		}
		
operation newsletter!Text getHtmlTextElement() : html!HTMLElement{
	var p = new html!P;
	p.align = self.align.literal;
	p.addStyle(html!StyleKey#lineHeight, self.height.toString() + "px");
	p.addStyle(html!StyleKey#width, self.width.toString() + "px");
	
	//Add A element if applies
	if(self.link <> null){
		var a = new html!A;
		a.ref = self.link;
		a.addStyle(html!StyleKey#textDecoration, "none");
		p.addElementRecursively(a);
	}
	
	//Add B element if applies
	if(self.bold){
		p.addElementRecursively(new html!B);
	}
	
	//Add I element if applies
	if(self.italic){
		p.addElementRecursively(new html!I);
	}
	
	//Add U element if applies
	if(self.underline){
		p.addElementRecursively(new html!U);
	}
	
	//Add S element if applies
	if(self.strikethrough){
		p.addElementRecursively(new html!S);
	}
	
	var font = new html!FONT;
	font.value = self.content;
	font.face = self.fontFamily.literal;
	font.size = self.fontSize;
	font.color = self.fontColor.literal;
	p.addElementRecursively(font);
	return p;
}

operation newsletter!Button getHtmlButtonElement() : html!HTMLElement{
	self.text.link = self.link;
	var p = self.text.getHtmlTextElement();
	p.align = self.align.literal;
	
	if(p.elements.get(0).isTypeOf(html!A)){
		//Button with link
		var a = p.elements.get(0);
		a.addButtonStyles(self);
	} else {
		//Button without link
		p.addButtonStyles(self);
	}
	
	return p;
}

operation html!HTMLElement addButtonStyles(button : newsletter!Button) {
	//Dynamic Styles
	self.addStyle(html!StyleKey#backgroundColor, button.color.literal);
	self.addStyle(html!StyleKey#lineHeight, button.height.toString() + "px");
	self.addStyle(html!StyleKey#width, button.width.toString() + "px");
	//Static Styles
	self.addStyle(html!StyleKey#display, "inline-block");
	self.addStyle(html!StyleKey#textDecoration, "none");
	self.addStyle(html!StyleKey#textAlign, "center");
} 

operation newsletter!Image getHtmlImageElement() : html!HTMLElement{
	var p = new html!P;
	p.align = self.align.literal;
	var img = new html!IMG;
	img.src = self.src;
	img.width = self.width.toString();
	img.height = self.height.toString();
	img.border = "0";
	
	if(self.link <> null){
		var a = new html!A;
		a.ref = self.link;
		p.addElementRecursively(a);
	}
	p.addElementRecursively(img);
	return p;
}

operation newsletter!Video getHtmlVideoElement() : html!HTMLElement{
	var preview = self.preview.getHtmlImageElement();
	var title = self.title.getHtmlTextElement();
	var button = self.button.getHtmlButtonElement();
	
	var div = new html!DIV;
	div.align = self.align.literal;
	div.addElement(preview);
	div.addElement(title);
	div.addElement(button);
	return div;
}

operation newsletter!Divider getHtmlDividerElement() : html!HTMLElement{
	var table = new html!TABLE;
	table.cellpadding = "10";
	table.width = "100%";
	
	var hr = new html!HR;
	hr.color = self.color.literal; 
	
	table.addElement(new html!TR);
	table.addElementRecursively(new html!TD);
	table.addElementRecursively(hr);
	
	return table;
}

operation html!HTMLElement addElement(element : html!HTMLElement){
	self.elements.add(element);
}

operation html!HTMLElement addElementRecursively(element : html!HTMLElement){
	if(self.elements.isEmpty()){
		self.addElement(element);
	} else {
		self.elements.get(0).addElementRecursively(element);
	}
}

operation html!HTMLElement addStyle(key : Any, value : String){
	var style = new html!Style;
	style.key = key;
	style.value = value;
	self.styles.add(style);
}